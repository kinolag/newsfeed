{"version":3,"sources":["assets/s_logo_1200.png","components/Header.js","components/Editions.js","components/List.js","components/NotFound.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","style","paddingTop","border","width","margin","alignItems","fontSize","height","padding","src","slogo","alt","Button","country","countryFilter","setCountryFilter","countryDisplay","toUpperCase","onClick","Selector","editions","background","justifyContent","fontWeight","slice","map","edition","key","List","a","fetch","url","method","headers","origin","response","status","res","json","console","log","useState","process","news","updateNews","useEffect","newsFetcher","then","articles","article","domain","split","displayDomain","startsWith","displayContent","content","readMessage","target","rel","href","title","urlToImage","window","scrollTo","top","left","behavior","NotFound","to","Main","exact","path","component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.175ae108.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/s_logo_1200.258e2104.png\";","import React from \"react\";\nimport slogo from \"../assets/s_logo_1200.png\";\n\nexport default function Header() {\n  return (\n    <div\n      className=\"center-wrapper bg-white\"\n      style={{ paddingTop: \"4px\" }}\n    >\n      <div\n        className=\"multi-wrapper radius-4 text-plain\"\n        style={{ border: \"0px solid #d30d1d\", width: \"98%\" }}\n      >\n        <div style={{margin: \"0px 8px\"}}>\n          <h3 className=\"is-main-red news-headline\">\n            Simple NewsFeed\n          </h3>\n        </div>\n        <div\n          className=\"row-wrapper is-almost-black\"\n          style={{ alignItems: \"center\", margin: \"0px 8px\"}}\n        >\n          <span className=\"is-grey\" style={{ fontSize: \"16px\" }}>\n            A React app for\n          </span>\n          <div>\n            <img\n              style={{ height: \"25px\", width: \"auto\", padding: \"0px 0px 4px 6px\" }}\n              src={slogo}\n              alt=\"Logo\"\n            />\n          </div>\n          \n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\n/** encapsulated helper component to prevent code repetition in 2nd row.\n * className applied conditionally on selection\n * */\nconst Button = ({ country, countryFilter, setCountryFilter }) => {\n  /* NB: there may be other speial cases like \"gb\" if adding more countries to the array of available options, always check on addition. */\n  const countryDisplay = (country === \"gb\" ? \"uk\" : country).toUpperCase();\n  return (\n    <button\n      className={countryFilter === country ? \"selected-button\" : null}\n      onClick={() => setCountryFilter(country)}\n    >\n      {countryDisplay}\n    </button>\n  );\n};\n\nexport default function Selector({ countryFilter, setCountryFilter }) {\n  /* this is one of several filters that can be used fetching News API */\n  const editions = [\"gb\", \"us\", \"au\", \"fr\", \"it\", \"de\", \"nz\"];\n  return (\n    <section\n      className=\"center-wrapper radius-8\"\n      style={{ border: \"0px solid red\", width: \"100%\", background: \"rgba(240, 240, 240, 0.4)\", }}\n    >\n      <div\n        className=\"row-wrapper mar-b-12 text-plain\"\n        style={{\n          width: \"90%\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Button\n          country={editions[0]}\n          countryFilter={countryFilter}\n          setCountryFilter={setCountryFilter}\n        />\n        <p className=\"is-blue\" style={{ fontWeight: \"bold\" }}>\n          EDITIONS\n        </p>\n        <Button\n          country={editions[1]}\n          countryFilter={countryFilter}\n          setCountryFilter={setCountryFilter}\n        />\n      </div>\n      <div\n        className=\"row-wrapper mar-b-12\"\n        style={{\n          width: \"90%\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        {/* not all elemenyts are mapped here for layout reasons (0 and 1 are in row above) */}\n        {editions.slice(2).map((edition) => (\n          <Button\n            key={edition}\n            country={edition}\n            countryFilter={countryFilter}\n            setCountryFilter={setCountryFilter}\n          />\n        ))}\n      </div>\n    </section>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Selector from \"./Editions\";\n\nfunction List() {\n  /* we check for a positive response, otherwise if fetch fails we catch and log the error */\n  async function newsFetcher() {\n    try {\n      /* open proxy, needed to prevent cors-related issue fetching from News API */\n      const proxy = \"https://cors-anywhere.herokuapp.com/\";\n      const response = await fetch(proxy + url, {\n        method: \"GET\",\n        headers: {\n          // 'Content-Type': 'text/plain',\n          // 'X-My-Custom-Header': 'value-v',\n          // 'Authorization': 'Bearer ' + token,\n          origin: \"https://cors-anywhere.herokuapp.com/\",\n        },\n      });\n      if (response.status === 200) {\n        const res = response.json();\n        return res;\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  /* set different value to change default edition */\n  const [countryFilter, setCountryFilter] = useState(\"gb\");\n\n  const API_KEY = process.env.REACT_APP_NEWSAPI_KEY;\n\n  /* country is one of several filters that can be used fetching News API */\n  const url =\n    \"https://newsapi.org/v2/top-headlines?\" +\n    `country=${countryFilter}&` +\n    `apiKey=${API_KEY}`;\n\n  const [news, updateNews] = useState([]);\n\n  useEffect(() => {\n    newsFetcher().then((response) => {\n      if (response) {\n        const articles = response.articles;\n        updateNews(articles);\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [countryFilter]);\n\n  return (\n    <section className=\"column-wrapper news-list pad-15\">\n      <Selector\n        countryFilter={countryFilter}\n        setCountryFilter={setCountryFilter}\n      />\n\n      {news.map((article) => {\n        const domain = article.url.split(\"/\")[2];\n        const displayDomain = domain.startsWith(\"www.\")\n          ? domain.slice(4)\n          : domain;\n        const displayContent = article.content && article.content.split(\"[\")[0];\n\n        const readMessage =\n          countryFilter === \"fr\"\n            ? \"Lire l'article sur \"\n            : countryFilter === \"it\"\n            ? \"Leggi l'articolo su \"\n            : countryFilter === \"de\"\n            ? \"Artikel lesen auf \"\n            : \"Read article on \";\n\n        return (\n          <div key={article.url} className=\"column-wrapper news-item\">\n            <a\n              className=\"a2\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href={article.url}\n              title=\"Full article\"\n            >\n              <h3 className=\"news-headline text-serif mar-15\">\n                {article.title}\n              </h3>\n            </a>\n            {article.urlToImage && (\n              <span className=\"center-wrapper\">\n                <img\n                  className=\"radius-8\"\n                  src={article.urlToImage}\n                  alt={article.title}\n                  style={{ width: \"74%\", height: \"auto\" }}\n                />\n              </span>\n            )}\n            <span className=\"news-body text-serif mar-15\">\n              {displayContent}\n            </span>\n            <a\n              className=\"a1 is-main-red text-plain\"\n              style={{ margin: \"5px 15px 15px 15px\" }}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href={article.url}\n              title=\"Full article\"\n            >\n              {readMessage}\n              <span style={{ fontWeight: \"bold\" }}>{displayDomain}</span>\n            </a>\n          </div>\n        );\n      })}\n      <div className=\"center-wrapper\" style={{ width: \"100%\" }}>\n        <button\n          className=\"mar-20\"\n          onClick={() =>\n            window.scrollTo({ top: 0, left: 0, behavior: \"smooth\" })\n          }\n        >\n          Back to top\n        </button>\n      </div>\n    </section>\n  );\n}\n\nexport default List;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nexport default function NotFound() {\n  return (\n    <section className=\"column-wrapper news-list pad-15\" style={{height: \"100%\"}}>\n      <h3 className=\"is-almost-black pad-20\">The page does not exist.</h3>\n      <NavLink className=\"a1 pad-20\" to=\"/\" title=\"Home\">\n        Back to home page\n      </NavLink>\n    </section>\n  );\n}\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport List from \"./List\";\nimport NotFound from \"./NotFound\";\n\nexport default function Main() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={List} />\n        <Route path=\"/:badLink\" component={NotFound} />\n      </Switch>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"center-wrapper\" style={{ width: \"100%\" }}>\n        <div className=\"content-area mar-5 radius-8\">\n          <Header />\n          <Main />\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}